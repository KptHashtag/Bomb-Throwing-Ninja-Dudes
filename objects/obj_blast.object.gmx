<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_explosion</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = ""

trigger = true

dist = 0

act_dist = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*
if(trigger){
    if(type = "star"){
        dist = sprite_get_width(sp_Crate) * 5
    }else if(type = "hori" or type = "ver"){
        dist = sprite_get_width(sp_Dude) * 7
    }
    trigger = false
}else{
    if(type = "star"){
        if(collision_circle(x,y,act_dist,obj_crate,false,true)){
            var t = collision_circle(x,y,act_dist,obj_crate,false,true);
            instance_destroy(t)
        }
        for(var i = 0; i &lt; ds_list_size(obj_gameCtrl.dudes); i++){
            if(collision_circle(x,y,act_dist,ds_list_find_value(obj_gameCtrl.dudes, i),false,true)){
                var t = ds_list_find_value(obj_gameCtrl.dudes, i);
                switch(t.ktory_to_dude){
                    case 0:
                        global.pts_first += 1
                        break;
                    case 1:
                        global.pts_second += 1
                        break;
                    case 2:
                        global.pts_third += 1
                        break;
                    case 4:
                        global.pts_forth += 1
                        break;
                }
                instance_destroy(t)
                ds_list_delete(obj_gameCtrl.dudes, i)
            }
        }
    }
    else if(type = "ver"){
        if(collision_line(x + sprite_get_width(sp_Crate)/3,y,x + sprite_get_width(sp_Crate)/3, y + act_dist,obj_crate,false,true)){
            var t = collision_line(x + sprite_get_width(sp_Crate)/3,y,x + sprite_get_width(sp_Crate)/3, y + act_dist,obj_crate,false,true);
            instance_destroy(t)
         } 
         if(collision_line(x - sprite_get_width(sp_Crate)/3,y,x - sprite_get_width(sp_Crate)/3, y + act_dist,obj_crate,false,true)){
            var t = collision_line(x - sprite_get_width(sp_Crate)/3,y,x - sprite_get_width(sp_Crate)/3, y + act_dist,obj_crate,false,true);
            instance_destroy(t)
         } 
         
         if(collision_line(x + sprite_get_width(sp_Crate)/3,y,x + sprite_get_width(sp_Crate)/3, y - act_dist,obj_crate,false,true)){
            var t = collision_line(x + sprite_get_width(sp_Crate)/3,y,x + sprite_get_width(sp_Crate)/3, y - act_dist,obj_crate,false,true);
            instance_destroy(t)
         }
         if(collision_line(x - sprite_get_width(sp_Crate)/3,y,x - sprite_get_width(sp_Crate)/3, y - act_dist,obj_crate,false,true)){
            var t = collision_line(x - sprite_get_width(sp_Crate)/3,y,x - sprite_get_width(sp_Crate)/3, y - act_dist,obj_crate,false,true);
            instance_destroy(t)
         }
        for(var i = 0; i &lt; ds_list_size(obj_gameCtrl.dudes); i++){
            if(collision_line(x + sprite_get_width(sp_Crate)/3,y,x + sprite_get_width(sp_Crate)/3, y + act_dist,ds_list_find_value(obj_gameCtrl.dudes, i),false,true) 
            || collision_line(x - sprite_get_width(sp_Crate)/3,y,x - sprite_get_width(sp_Crate)/3, y + act_dist,ds_list_find_value(obj_gameCtrl.dudes, i),false,true) 
            || collision_line(x + sprite_get_width(sp_Crate)/3,y,x + sprite_get_width(sp_Crate)/3, y - act_dist,ds_list_find_value(obj_gameCtrl.dudes, i),false,true) 
            || collision_line(x - sprite_get_width(sp_Crate)/3,y,x - sprite_get_width(sp_Crate)/3, y - act_dist,ds_list_find_value(obj_gameCtrl.dudes, i),false,true)){
                var t = ds_list_find_value(obj_gameCtrl.dudes, i);
                switch(t.ktory_to_dude){
                    case 0:
                        global.pts_first += 1
                        break;
                    case 1:
                        global.pts_second += 1
                        break;
                    case 2:
                        global.pts_third += 1
                        break;
                    case 4:
                        global.pts_forth += 1
                        break;
                }
                instance_destroy(t)
                ds_list_delete(obj_gameCtrl.dudes, i)
                }
            }
        }else if(type = "hori"){
        if(collision_line(x,y + sprite_get_height(sp_Crate)/3,x + act_dist,y + sprite_get_height(sp_Crate)/3,obj_crate,false,true)){
            var t = collision_line(x,y + sprite_get_height(sp_Crate)/3,x + act_dist,y + sprite_get_height(sp_Crate)/3,obj_crate,false,true);
            instance_destroy(t)
         }
         if(collision_line(x,y - sprite_get_height(sp_Crate)/3,x + act_dist,y - sprite_get_height(sp_Crate)/3,obj_crate,false,true)){
            var t = collision_line(x,y - sprite_get_height(sp_Crate)/3,x + act_dist,y - sprite_get_height(sp_Crate)/3,obj_crate,false,true);
            instance_destroy(t)
         }
          
         if(collision_line(x,y + sprite_get_height(sp_Crate)/3,x - act_dist,y + sprite_get_height(sp_Crate)/3,obj_crate,false,true)){
            var t = collision_line(x,y + sprite_get_height(sp_Crate)/3,x - act_dist,y + sprite_get_height(sp_Crate)/3,obj_crate,false,true);
            instance_destroy(t)
         }
         if(collision_line(x,y - sprite_get_height(sp_Crate)/3,x - act_dist,y - sprite_get_height(sp_Crate)/3,obj_crate,false,true)){
            var t = collision_line(x,y - sprite_get_height(sp_Crate)/3,x - act_dist,y - sprite_get_height(sp_Crate)/3,obj_crate,false,true);
            instance_destroy(t)
         }
        for(var i = 0; i &lt; ds_list_size(obj_gameCtrl.dudes); i++){
            if(collision_line(x,y + sprite_get_height(sp_Crate)/3,x + act_dist,y + sprite_get_height(sp_Crate)/3,ds_list_find_value(obj_gameCtrl.dudes, i),false,true)
            || collision_line(x,y - sprite_get_height(sp_Crate)/3,x + act_dist,y - sprite_get_height(sp_Crate)/3,ds_list_find_value(obj_gameCtrl.dudes, i),false,true)
            || collision_line(x,y + sprite_get_height(sp_Crate)/3,x - act_dist,y + sprite_get_height(sp_Crate)/3,ds_list_find_value(obj_gameCtrl.dudes, i),false,true)
            || collision_line(x,y - sprite_get_height(sp_Crate)/3,x - act_dist,y - sprite_get_height(sp_Crate)/3,ds_list_find_value(obj_gameCtrl.dudes, i),false,true)){
                var t = ds_list_find_value(obj_gameCtrl.dudes, i);
                switch(t.ktory_to_dude){
                    case 0:
                        global.pts_first += 1
                        break;
                    case 1:
                        global.pts_second += 1
                        break;
                    case 2:
                        global.pts_third += 1
                        break;
                    case 4:
                        global.pts_forth += 1
                        break;
                }
                instance_destroy(t)
                ds_list_delete(obj_gameCtrl.dudes, i)
            }
        }
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_crate">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy(other.id)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_dude">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var t = ds_list_find_value(obj_gameCtrl.dudes, ds_list_find_index(obj_gameCtrl.dudes,other.id));
                switch(t.ktory_to_dude){
                    case 0:
                        global.pts_first += 1
                        break;
                    case 1:
                        global.pts_second += 1
                        break;
                    case 2:
                        global.pts_third += 1
                        break;
                    case 4:
                        global.pts_forth += 1
                        break;
                }
                ds_list_delete(obj_gameCtrl.dudes, ds_list_find_index(obj_gameCtrl.dudes, other.id))
                instance_destroy(t)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.5
draw_self()

if(image_index &gt;= image_number - 1) instance_destroy()
//draw_text(x,y,string(trigger) + string(type) + string(dist))
/*
if(!trigger){
    if(type = "star"){
        draw_circle(x,y,act_dist,true)
        act_dist += obj_gameCtrl.spd*2
        if(act_dist &gt; dist/2) instance_destroy()
    }
    if(type = "ver"){
        draw_line(x + sprite_get_width(sp_Crate)/3,y,x + sprite_get_width(sp_Crate)/3,y + act_dist)
        draw_line(x - sprite_get_width(sp_Crate)/3,y,x - sprite_get_width(sp_Crate)/3,y + act_dist)
        
        draw_line(x + sprite_get_width(sp_Crate)/3,y,x + sprite_get_width(sp_Crate)/3,y - act_dist)
        draw_line(x - sprite_get_width(sp_Crate)/3,y,x - sprite_get_width(sp_Crate)/3,y - act_dist)
        act_dist += obj_gameCtrl.spd*2
        if(act_dist &gt; dist/2) instance_destroy()
    }
    if(type = "hori"){
        draw_line(x,y + sprite_get_height(sp_Crate)/3,x + act_dist,y+ sprite_get_height(sp_Crate)/3)
        draw_line(x,y - sprite_get_height(sp_Crate)/3,x + act_dist,y- sprite_get_height(sp_Crate)/3)
        
        draw_line(x,y + sprite_get_height(sp_Crate)/3,x - act_dist,y+ sprite_get_height(sp_Crate)/3)
        draw_line(x,y - sprite_get_height(sp_Crate)/3,x - act_dist,y- sprite_get_height(sp_Crate)/3)
        act_dist += obj_gameCtrl.spd*2
        if(act_dist &gt; dist/2) instance_destroy()
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
