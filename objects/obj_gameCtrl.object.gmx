<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spd = 6

per_chunk = 32
view = -1


dudes = ds_list_create()

var dude = instance_create(128,128, obj_dude);
instance_create(128,128,obj_spawn)
dude.ktory_to_dude = 4
view++
dude.view = view
view_enabled = true
view_visible[view] = true
view_hview[view] = 540
view_wview[view] = 960
view_object[view] = dude
view_hborder[view] = 400
view_vborder[view] = 200
view_hport[view] = 530
view_wport[view] = 950
view_xport[view] = 0
view_yport[view] = 0
ds_list_add(dudes, dude)

dude = instance_create(room_width - 128,128, obj_dude);
instance_create(room_width - 128,128, obj_spawn);
dude.ktory_to_dude = 0
view++
dude.view = view
view_enabled = true
view_visible[view] = true
view_hview[view] = 540
view_wview[view] = 960
view_object[view] = dude
view_hborder[view] = 400
view_vborder[view] = 200
view_hport[view] = 530
view_wport[view] = 950
view_xport[view] = 965
view_yport[view] = 0
ds_list_add(dudes, dude)

dude = instance_create(room_width - 128,room_height - 128, obj_dude);
instance_create(room_width - 128,room_height - 128, obj_spawn);
dude.ktory_to_dude = 1
view++
dude.view = view
view_enabled = true
view_visible[view] = true
view_hview[view] = 540
view_wview[view] = 960
view_object[view] = dude
view_hborder[view] = 400
view_vborder[view] = 200
view_hport[view] = 530
view_wport[view] = 950
view_xport[view] = 965
view_yport[view] = 545
ds_list_add(dudes, dude)

dude = instance_create(128,room_height - 128, obj_dude);
instance_create(128,room_height - 128, obj_spawn);
dude.ktory_to_dude = 2
view++
dude.view = view
view_enabled = true
view_visible[view] = true
view_hview[view] = 540
view_wview[view] = 960
view_object[view] = dude
view_hborder[view] = 400
view_vborder[view] = 200
view_hport[view] = 530
view_wport[view] = 950
view_xport[view] = 0
view_yport[view] = 545
ds_list_add(dudes, dude)



//CHUNK LEWY GORNY
repeat(per_chunk){
    var xx = irandom(room_width/2)
    var yy = irandom(room_height/2)
    xx = floor(xx/sprite_get_width(sp_Crate)) * sprite_get_width(sp_Crate)
    yy = floor(yy/sprite_get_height(sp_Crate)) * sprite_get_height(sp_Crate)
    if(!collision_rectangle(xx - sprite_get_width(sp_spawnArea), yy - sprite_get_height(sp_spawnArea), xx + sprite_get_width(sp_spawnArea), yy + sprite_get_height(sp_spawnArea),obj_spawn,false,false)){
        instance_create(xx,yy,obj_powerup)
    }
    instance_create(xx,yy,obj_spawn)
//CHUNK PRAWY GORNY
    var xx = irandom(room_width/2) + room_width/2
    var yy = irandom(room_height/2)
    xx = floor(xx/sprite_get_width(sp_Crate)) * sprite_get_width(sp_Crate)
    yy = floor(yy/sprite_get_height(sp_Crate)) * sprite_get_height(sp_Crate)
    if(!collision_rectangle(xx - sprite_get_width(sp_spawnArea), yy - sprite_get_height(sp_spawnArea), xx + sprite_get_width(sp_spawnArea), yy + sprite_get_height(sp_spawnArea),obj_spawn,false,false)){
        instance_create(xx,yy,obj_powerup)
    }
    instance_create(xx,yy,obj_spawn)
//CHUNK LEWY DOLNY
    var xx = irandom(room_width/2)
    var yy = irandom(room_height/2) + room_height/2
    xx = floor(xx/sprite_get_width(sp_Crate)) * sprite_get_width(sp_Crate)
    yy = floor(yy/sprite_get_height(sp_Crate)) * sprite_get_height(sp_Crate)
    if(!collision_rectangle(xx - sprite_get_width(sp_spawnArea), yy - sprite_get_height(sp_spawnArea), xx + sprite_get_width(sp_spawnArea), yy + sprite_get_height(sp_spawnArea),obj_spawn,false,false)){
        instance_create(xx,yy,obj_powerup)
    }
    instance_create(xx,yy,obj_spawn)
//CHUNK PRAWY DOLNY
    var xx = irandom(room_width/2) + room_width/2
    var yy = irandom(room_height/2) + room_height/2
    xx = floor(xx/sprite_get_width(sp_Crate)) * sprite_get_width(sp_Crate)
    yy = floor(yy/sprite_get_height(sp_Crate)) * sprite_get_height(sp_Crate)
    if(!collision_rectangle(xx - sprite_get_width(sp_spawnArea), yy - sprite_get_height(sp_spawnArea), xx + sprite_get_width(sp_spawnArea), yy + sprite_get_height(sp_spawnArea),obj_spawn,false,false)){
        instance_create(xx,yy,obj_powerup)
    }
    instance_create(xx,yy,obj_spawn)
}




for(var i = 0; i &lt; room_width/sprite_get_width(sp_Crate); i ++){
    for(var j = 0; j &lt; room_height/sprite_get_height(sp_Crate); j ++){
        if(!collision_point(sprite_get_width(sp_Crate)/2 + sprite_get_width(sp_Crate)*i, sprite_get_height(sp_Crate)/2 + sprite_get_height(sp_Crate)*j,obj_spawn,false,true)){
            instance_create(sprite_get_width(sp_Crate)/2 + sprite_get_width(sp_Crate)*i, sprite_get_height(sp_Crate)/2 + sprite_get_height(sp_Crate)*j, obj_crate)
        }
    }
}
//instance_destroy(obj_spawn)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ds_list_size(dudes) &lt;= 1){
    room_restart()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

show_debug_message("Event = " + async_load[? "event_type"]);        // Debug cocde so you can see which event has been
show_debug_message("Pad = " + string(async_load[? "pad_index"]));   // triggered and the pad associated with it.

switch(async_load[? "event_type"])             // Parse the async_load map to see which event has been triggered
{
case "gamepad discovered":                     // A game pad has been discovered
    var pad = async_load[? "pad_index"];       // Get the pad index value from the async_load map
    gamepad_set_axis_deadzone(pad, 0.5);       // Set the "deadzone" for the axis
    gamepad_set_button_threshold(pad, 0.1);    // Set the "threshold" for the triggers
    if !(instance_exists(player[pad]))         // Check to see if an instance is associated with this pad index
        {
        // Create a player object and assign it a pad number
        player[pad] = instance_create(64 + random(room_width - 128), 64 + random(room_height - 128), obj_Player);
        with (player[pad])
            {
            image_index = pad;
            pad_num = pad;
            }
        }
    break;
case "gamepad lost":                           // Gamepad has been removed or otherwise disabled
    var pad = async_load[? "pad_index"];       // Get the pad index
    if (instance_exists(player[pad]))          // Check for a player instance associated with the pad and remove it
        {
        with (player[pad])
            {
            instance_destroy();
            }
        player[pad] = noone;                   // Set the controller array to "noone" so it detects a new pad being connected
        }
    break;
}

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
